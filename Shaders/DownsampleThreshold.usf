#include "Shared.ush"

float4 InputSizeAndInvInputSize;
float ThresholdLevel;
float ThresholdRange;

float3 Downsample( Texture2D Texture, SamplerState Sampler, float2 UV, float2 PixelSize )
{
	const float2 Coords[13] = {
		float2( -1.0f,  1.0f ), float2(  1.0f,  1.0f ),
		float2( -1.0f, -1.0f ), float2(  1.0f, -1.0f ),

		float2(-2.0f, 2.0f), float2( 0.0f, 2.0f), float2( 2.0f, 2.0f),
		float2(-2.0f, 0.0f), float2( 0.0f, 0.0f), float2( 2.0f, 0.0f),
		float2(-2.0f,-2.0f), float2( 0.0f,-2.0f), float2( 2.0f,-2.0f)
	};


	const float Weights[13] = {
		// 4 samples
		// (1 / 4) * 0.5f = 0.125f
		0.125f, 0.125f,
		0.125f, 0.125f,

		// 9 samples
		// (1 / 9) * 0.5f
		0.0555555f, 0.0555555f, 0.0555555f,
		0.0555555f, 0.0555555f, 0.0555555f,
		0.0555555f, 0.0555555f, 0.0555555f
	};

	float3 OutColor = float3( 0.0f, 0.0f ,0.0f );

	UNROLL
	for( int i = 0; i < 13; i++ )
	{
		float2 CurrentUV = UV + Coords[i] * PixelSize;
		OutColor += Weights[i] * Texture2DSample(Texture, Sampler, CurrentUV ).rgb;
	}

	
	// Threshold
	float Luminance = dot(OutColor.rgb, 1);
	float ThresholdScale = saturate( (Luminance - ThresholdLevel) / ThresholdRange );

	return OutColor * ThresholdScale;
}

void DownsamplePS(
	in noperspective float4 UVAndScreenPos : TEXCOORD0,
	out float3 OutColor : SV_Target0 )
{
	float2 InvPixelSize = (InputSizeAndInvInputSize.zw) * 0.5;
	float2 UV = UVAndScreenPos.xy;
	OutColor.rgb = Downsample( InputTexture, InputSampler, UV, InvPixelSize );
}

Texture2D PreviousTexture;
float4 PreviousSizeAndInvInputSize;
float Radius;

float3 Upsample( Texture2D Texture, SamplerState Sampler, float2 UV, float2 PixelSize )
{
	const float2 Coords[9] = {
		float2( -1.0f,  1.0f ), float2(  0.0f,  1.0f ), float2(  1.0f,  1.0f ),
		float2( -1.0f,  0.0f ), float2(  0.0f,  0.0f ), float2(  1.0f,  0.0f ),
		float2( -1.0f, -1.0f ), float2(  0.0f, -1.0f ), float2(  1.0f, -1.0f )
	};

	const float Weights[9] = {
		0.0625f, 0.125f, 0.0625f,
		0.125f,  0.25f,  0.125f,
		0.0625f, 0.125f, 0.0625f
	};

	float3 Color = float3( 0.0f, 0.0f, 0.0f );

	UNROLL
	for( int i = 0; i < 9; i++ )
	{
		float2 CurrentUV = UV + Coords[i] * PixelSize;
		Color += Weights[i] * Texture2DSampleLevel(Texture, Sampler, CurrentUV, 0).rgb;
	}

	return Color;
}

void UpsampleCombinePS(
	in noperspective float4 UVAndScreenPos : TEXCOORD0,
	out float3 OutColor : SV_Target0 )
{
	float2 UV = UVAndScreenPos.xy;

	float3 CurrentColor = Texture2DSampleLevel( InputTexture, InputSampler, UV * InputSizeAndInvInputSize.xy, 0).rgb;
	float3 PreviousColor = Upsample( PreviousTexture, InputSampler, UV, PreviousSizeAndInvInputSize.zw );

	OutColor.rgb = lerp(CurrentColor, PreviousColor, Radius);
}